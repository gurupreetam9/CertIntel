
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // User can read their own profile OR an admin can read any user's profile.
      // The API layer will enforce if an admin is *linked* to a student for specific data like certificates.
      allow read: if isOwner(userId) || isAdmin(); 
      
      // User can create their own profile document.
      allow create: if isOwner(userId); 
      
      // User can update their own profile.
      // An admin can update specific fields of a student's profile.
      allow update: if isOwner(userId) || 
                       (isAdmin() &&
                        // Ensure the document being updated is actually a student's profile
                        get(/databases/$(database)/documents/users/$(userId)).data.role == 'student' &&
                        request.resource.data.keys().hasOnly([
                          'linkRequestStatus', 'associatedAdminFirebaseId', 'associatedAdminUniqueId', 
                          'updatedAt', 'displayName', 'rollNo' // Fields admin can modify on student
                        ]));
      // No delete rule for user profiles by default for data integrity.
    }

    match /admins/{adminId} {
      // Admin can read their own special admin record. Other admins can too (e.g., for system checks if needed, though less common).
      allow read: if isOwner(adminId) || isAdmin(); 
      
      // Admin can create their own admin-specific record; must include adminUniqueId.
      allow create: if isOwner(adminId) && request.resource.data.adminUniqueId != null; 
      
      // No update/delete for admin-specific records by default for simplicity.
    }

    match /studentLinkRequests/{requestId} {
      // Student can read their own request OR the targeted admin (whose adminFirebaseId matches) can read it.
      allow read: if request.auth != null &&
                     (get(/databases/$(database)/documents/studentLinkRequests/$(requestId)).data.studentUserId == request.auth.uid ||
                      (isAdmin() && get(/databases/$(database)/documents/studentLinkRequests/$(requestId)).data.adminFirebaseId == request.auth.uid));
      
      // Student can create their own link request.
      allow create: if request.auth != null && request.resource.data.studentUserId == request.auth.uid;
      
      // Only the targeted admin can update status, resolvedAt, resolvedBy.
      allow update: if isAdmin() &&
                       get(/databases/$(database)/documents/studentLinkRequests/$(requestId)).data.adminFirebaseId == request.auth.uid &&
                       request.resource.data.keys().hasOnly(['status', 'resolvedAt', 'resolvedBy']);
      // No delete rule for requests by default.
    }
  }
}
