
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is a Student
    function isStudent(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }

    // Users Collection
    match /users/{userId} {
      // User can read, update (their own displayName, rollNo, updatedAt), and delete their own profile
      allow read, delete: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'rollNo', 'updatedAt']);
      
      // Allow authenticated users to create their own profile (e.g., during registration)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Admin can read any user profile (student or admin)
      allow read: if request.auth != null && isAdmin(request.auth.uid);

      // Admin can update specific linkage-related fields of a student's profile
      allow update: if request.auth != null &&
                       isAdmin(request.auth.uid) && // Requester is admin
                       isStudent(userId) && // Target user is a student
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'linkRequestStatus',
                         'associatedAdminFirebaseId',
                         'associatedAdminUniqueId', // Student might clear this if admin not found/request rejected
                         'updatedAt'
                       ]);
    }

    // Admins Collection (stores unique admin ID mapping)
    match /admins/{adminFirebaseUid} { // Document ID is admin's Firebase UID
      // Admin can read their own admin-specific profile (unique ID)
      allow read: if request.auth != null && request.auth.uid == adminFirebaseUid;
      // Allow creation by the authenticated user if they are creating their own admin record
      allow create: if request.auth != null && request.auth.uid == adminFirebaseUid;
    }

    // Student Link Requests Collection
    match /studentLinkRequests/{requestId} {
      // Allow student to create their own link request
      allow create: if request.auth != null &&
                       request.resource.data.studentUserId == request.auth.uid &&
                       isStudent(request.auth.uid);
      
      // Allow an admin to read requests targeted to them
      allow read: if request.auth != null &&
                     isAdmin(request.auth.uid) &&
                     resource.data.adminFirebaseId == request.auth.uid; // Request is for this admin
                     
      // Allow an admin to update (accept/reject) a request targeted to them
      allow update: if request.auth != null &&
                       isAdmin(request.auth.uid) && // Requester is admin
                       resource.data.adminFirebaseId == request.auth.uid && // Request is for this admin
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resolvedAt', 'resolvedBy']); // Only allow specific fields to be changed
    }
  }
}
