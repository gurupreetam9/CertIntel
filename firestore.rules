
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      allow read: if true; // ANYONE CAN READ - FOR DEBUGGING ONLY (revert to request.auth.uid == userId for production)
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && resource.data.role == 'student');
      allow delete: if false;
    }

    // Admins Collection (primarily for initial lookup if needed, user profile on 'users' is source of truth for role)
    // This collection itself might be redundant if adminUniqueId is reliably on the user's profile document.
    match /admins/{adminId} {
      allow read: if request.auth != null; // Allow any authenticated user to read (e.g. for admin ID lookup for linking)
      allow write: if request.auth != null && request.auth.uid == adminId &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admin can write their own entry
    }

    // Student Link Requests Collection
    match /studentLinkRequests/{requestId} {
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.studentUserId ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && request.auth.uid == resource.data.adminFirebaseId));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentUserId;

      allow update: if request.auth != null &&
                  (
                    // Admin can accept/reject a PENDING request for them
                    (
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                      request.auth.uid == resource.data.adminFirebaseId && // Admin is the target of the request
                      resource.data.status == 'pending' && // Request must be currently pending
                      (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected') && // New status is valid
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resolvedAt', 'resolvedBy', 'updatedAt'])
                    ) ||
                    // Student can cancel their own PENDING or ACCEPTED request
                    (
                      request.auth.uid == resource.data.studentUserId && // Is the student
                      request.resource.data.status == 'cancelled' &&     // New status is 'cancelled'
                      (resource.data.status == 'pending' || resource.data.status == 'accepted') // Old status was pending or accepted
                      // TEMPORARILY REMOVED FOR DEBUGGING: && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resolvedAt', 'resolvedBy', 'updatedAt'])
                    )
                  );
      allow delete: if false;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
