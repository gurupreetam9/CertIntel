
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function getRequestingUserRole(authObj) {
      return get(/databases/$(database)/documents/users/$(authObj.uid)).data.role;
    }

    function isAdmin(authObj) {
      return getRequestingUserRole(authObj) == 'admin';
    }

    function isStudent(authObj) {
      return getRequestingUserRole(authObj) == 'student';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isStudentDoc(docData) {
      return docData.role == 'student';
    }

    // Student self-updating their profile
    // They can update their display name, roll number, and any linking information.
    function isStudentSelfUpdate(request, resource) {
      let allAllowedSelfUpdateFields = [
        'displayName', 'rollNo', // Standard profile fields
        'linkRequestStatus', 'associatedAdminFirebaseId', 'associatedAdminUniqueId', // Linking fields
        'updatedAt' // Timestamp
      ];
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      // Ensure that *only* allowed fields are being changed, and at least one field is actually changing.
      return changedKeys.subsetOf(allAllowedSelfUpdateFields) && changedKeys.size() > 0;
    }

    // Admin updating a student's profile (specifically for link resolution)
    function isAdminUpdatingStudentLinkStatus(request, resource) {
      let allowedFieldsByAdminForLinking = ['linkRequestStatus', 'associatedAdminFirebaseId', 'updatedAt'];
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return changedKeys.subsetOf(allowedFieldsByAdminForLinking) && changedKeys.size() > 0;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuth() && (isOwner(userId) || isAdmin(request.auth));
      allow create: if isAuth() && isOwner(userId); // Allows user to create their own profile
      allow update: if isAuth() && (
                      (isOwner(userId) && isStudentDoc(request.resource.data) && isStudentSelfUpdate(request, resource)) || // Student updating their own profile
                      (isOwner(userId) && request.resource.data.role == 'admin' && request.resource.data.diff(resource.data).affectedKeys().subsetOf(['displayName', 'updatedAt'])) || // Admin updating their own displayName
                      (isAdmin(request.auth) && isStudentDoc(resource.data) && isAdminUpdatingStudentLinkStatus(request, resource)) // Admin updating a student's linking status
                    );
      // No delete rule for user profiles by default
    }

    // Admins Collection (stores adminUniqueId mapping to Firebase UID)
    match /admins/{adminId} {
      allow read: if true; // Anyone can read (e.g., to validate an adminUniqueId)
      allow create: if isAuth() && isOwner(adminId); // Admin creates their own entry during registration
      // No general update/delete for now
    }

    // StudentLinkRequests Collection
    match /studentLinkRequests/{requestId} {
      allow create: if isAuth() && isOwner(request.resource.data.studentUserId);
      allow read: if isAuth() && 
                     (isOwner(resource.data.studentUserId) || 
                      (isAdmin(request.auth) && request.auth.uid == resource.data.adminFirebaseId)
                     );
      allow update: if isAuth() &&
                       isAdmin(request.auth) &&
                       request.auth.uid == resource.data.adminFirebaseId &&
                       // Ensure only specific fields related to resolution are changed
                       request.resource.data.diff(resource.data).affectedKeys().hasAll(['status', 'resolvedAt', 'resolvedBy']) &&
                       request.resource.data.status != resource.data.status; // Ensure status is actually changing
      // No delete rule for requests by default
    }
  }
}
