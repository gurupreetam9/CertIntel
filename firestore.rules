
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Allow any authenticated user to read, create, and update their own profile.
    match /users/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
      // Future: Consider if admins need direct read access to specific student profiles
      // if they are linked. Currently, student certificates are fetched via an API
      // route that performs its own authorization.
    }

    // Admins collection (stores adminUniqueId):
    // - Allow any authenticated user to read (e.g., for validating an adminUniqueId during student registration if needed).
    // - Allow creation only if the document ID (which is the admin's Firebase UID) matches the authenticated user.
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == adminId;
      // No updates or deletes defined for now for simplicity.
    }

    // StudentLinkRequests collection:
    // - Students can create requests (document studentUserId must match their own UID).
    // - Admins can read and update requests where the request's adminFirebaseId matches their own UID.
    match /studentLinkRequests/{requestId} {
      allow create: if request.auth != null && request.resource.data.studentUserId == request.auth.uid;
      // For reading requests (e.g., by an admin)
      // For updating requests (e.g., an admin accepting/rejecting)
      allow read, update: if request.auth != null &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                            resource.data.adminFirebaseId == request.auth.uid;
    }
  }
}
