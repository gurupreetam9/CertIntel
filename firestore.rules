
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // WARNING: TEMPORARILY OPEN FOR DEBUGGING - REVERT AFTER TEST
    // Allows any client to read any user profile.
    match /users/{userId} {
      allow read: if true; // ANYONE CAN READ - FOR DEBUGGING ONLY
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth.uid == userId || 
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && resource.data.role == 'student'); // User can update their own, or admin can update specific fields of a student
      allow delete: if false; // Generally, don't allow client-side deletion of user docs
    }

    // Admins Collection (for admin-specific, non-profile data like their unique ID)
    match /admins/{adminId} {
      allow read: if request.auth != null && request.auth.uid == adminId; // Admin can read their own admin-specific document
      allow write: if request.auth != null && request.auth.uid == adminId; // Admin can write their own admin-specific document
                                  // And (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ?
    }

    // Student Link Requests Collection
    match /studentLinkRequests/{requestId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.studentUserId || 
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && request.auth.uid == resource.data.adminFirebaseId));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentUserId; // Student can create their own request
      allow update: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                      request.auth.uid == resource.data.adminFirebaseId &&
                      (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected') &&
                      !resource.data.status.matches('accepted|rejected'); // Admin can accept/reject if request is for them and not already resolved
                      // Only allow updating status, resolvedAt, resolvedBy
                      // allow update: if request.auth != null && request.auth.uid == resource.data.adminFirebaseId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resolvedAt', 'resolvedBy']);
      allow delete: if false;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
