rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users Collection
    // - Allow user to read/update their own profile.
    // - Allow an admin to read any user profile.
    // - Allow authenticated users to create their own profile (e.g., during registration).
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                    || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId 
                      || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' 
                          && (request.resource.data.keys().hasOnly(['linkRequestStatus', 'associatedAdminFirebaseId', 'associatedAdminUniqueId', 'updatedAt', 'displayName', 'rollNo'])
                              || request.resource.data.keys().hasOnly(['displayName', 'rollNo', 'updatedAt']) // for student self-update
                          )
                         ); 
      // No delete rule for user profiles by default, handle manually or via admin functions if needed
    }

    // Admins Collection (stores adminUniqueId mapping to Firebase UID)
    // - Only authenticated users can create their admin record (done during admin registration flow).
    // - Allow anyone to read admin profiles (e.g., to validate an adminUniqueId, though this could be tightened).
    // - Updates/deletes typically handled by backend logic or specific admin roles if needed.
    match /admins/{adminId} {
      allow read: if true; // Or if request.auth != null; for slightly more restriction
      allow create: if request.auth.uid == adminId; // Admin creates their own entry
      // No general update/delete for now
    }

    // StudentLinkRequests Collection
    // - Student can create their own request.
    // - Admin can read requests targeted to them.
    // - Admin can update status of requests targeted to them.
    match /studentLinkRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.studentUserId;
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.studentUserId || 
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
                       request.auth.uid == resource.data.adminFirebaseId)
                     );
      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       request.auth.uid == resource.data.adminFirebaseId &&
                       request.resource.data.keys().hasAll(['status', 'resolvedAt', 'resolvedBy']) &&
                       request.resource.data.status != resource.data.status; // Ensure status is actually changing
      // No delete rule for requests by default
    }
  }
}