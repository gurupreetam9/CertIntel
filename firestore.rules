
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isRole(userId, roleName) {
      return isAuthenticated() && getUserRole(userId) == roleName;
    }

    function isAdmin(userId) {
      return isRole(userId, 'admin');
    }
    
    function requestingUserIsAdmin() {
      return isAdmin(request.auth.uid);
    }

    function isStudent(userId) {
      return isRole(userId, 'student');
    }

    function requestingUserIsStudent() {
      return isStudent(request.auth.uid);
    }

    // Check if all incoming data keys are within an allowed set.
    function incomingKeysAreSubsetOf(allowedKeys) {
      return request.resource.data.keys().toSet().difference(allowedKeys.toSet()).size() == 0;
    }
    
    // Check if specific immutable fields are unchanged (compares resource.data with request.resource.data for these keys)
    function coreImmutableFieldsUnchanged(fieldsToCheck) {
      return fieldsToCheck.hasAll(request.resource.data.keys().filter(key, key in fieldsToCheck)) &&
             fieldsToCheck.hasAll(resource.data.keys().filter(key, key in fieldsToCheck)) &&
             fieldsToCheck.filter(key, request.resource.data[key] != resource.data[key]).size() == 0;
    }

    // Student creating their own profile
    function studentIsCreatingOwnProfile(userId) {
      let requiredFieldsOnCreate = ['uid', 'email', 'role', 'createdAt', 'updatedAt', 'displayName'];
      // Optional fields a student might set (or be set as null/default) on creation, but cannot be admin-specific fields
      let optionalFieldsOnCreate = ['rollNo', 'linkRequestStatus', 'associatedAdminFirebaseId', 'associatedAdminUniqueId'];
      let allAllowedFieldsOnCreate = requiredFieldsOnCreate.concat(optionalFieldsOnCreate);

      return isAuthenticated() &&
             isOwner(userId) &&
             request.resource.data.uid == userId &&
             request.resource.data.email == request.auth.token.email &&
             request.resource.data.role == 'student' &&
             request.resource.data.keys().hasAll(requiredFieldsOnCreate) &&
             incomingKeysAreSubsetOf(allAllowedFieldsOnCreate.toSet()) &&
             request.resource.data.adminUniqueId == null; // Student cannot set their own adminUniqueId
    }
    
    // Student updating their own allowed fields (including link-related fields)
    function studentIsUpdatingOwnAllowedFields(userId) {
      let studentMutableFields = ['displayName', 'rollNo', 'updatedAt', 
                                  'linkRequestStatus', 'associatedAdminFirebaseId', 'associatedAdminUniqueId'];
      let studentImmutableFields = ['uid', 'email', 'role', 'createdAt', 'adminUniqueId']; // adminUniqueId must remain null for students

      let allKeysBeingWritten = request.resource.data.keys();
      let allAllowedKeysForStudent = studentMutableFields.concat(studentImmutableFields);
      
      // Check 1: Authenticated and is owner
      let authAndOwnerCheck = isAuthenticated() && isOwner(userId);

      // Check 2: Role is 'student' and is not changing
      let roleIntegrityCheck = resource.data.role == 'student' && 
                               request.resource.data.role == 'student';

      // Check 3: Core immutable fields are not being changed
      let immutableFieldsCheck = studentImmutableFields.filter(key, key in request.resource.data && request.resource.data[key] != resource.data[key]).size() == 0;
      
      // Check 4: Student not attempting to set adminUniqueId to a non-null value
      let adminUniqueIdCheck = request.resource.data.adminUniqueId == null;

      // Check 5: All fields being written are known and permissible for a student context
      let keysAreValidCheck = incomingKeysAreSubsetOf(allAllowedKeysForStudent.toSet());

      // Check 6: Only mutable fields are actually changing value
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let changedKeysAreMutableCheck = changedKeys.toSet().subsetOf(studentMutableFields.toSet());
      
      return authAndOwnerCheck &&
             roleIntegrityCheck &&
             immutableFieldsCheck &&
             adminUniqueIdCheck &&
             keysAreValidCheck &&
             changedKeysAreMutableCheck;
    }

    // Admin updating a student's link status
    function isAdminUpdatingStudentLinkStatus(studentUserId) {
      let studentCurrentData = resource.data; // student's existing profile
      let studentNewData = request.resource.data; // student's profile after admin's update
      
      let adminAllowedUpdateFieldsForStudent = ['linkRequestStatus', 'associatedAdminFirebaseId', 'updatedAt'];
      let studentImmutableByAdmin = ['uid', 'email', 'role', 'createdAt', 'displayName', 'rollNo', 'adminUniqueId', 'associatedAdminUniqueId'];

      // Check 1: Requesting user is an admin
      let adminCheck = requestingUserIsAdmin();

      // Check 2: Target user is a student and role is not changing
      let targetRoleCheck = studentCurrentData.role == 'student' && 
                            studentNewData.role == 'student';

      // Check 3: Fields admin cannot change on student profile are indeed unchanged
      let studentFieldsImmutableByAdminCheck = studentImmutableByAdmin.filter(key, key in studentNewData && studentNewData[key] != studentCurrentData[key]).size() == 0;
      
      // Check 4: The fields being changed by admin are only the allowed ones
      let changedKeys = studentNewData.diff(studentCurrentData).affectedKeys();
      let adminUpdateFieldsCheck = changedKeys.toSet().subsetOf(adminAllowedUpdateFieldsForStudent.toSet());

      return adminCheck &&
             targetRoleCheck &&
             studentFieldsImmutableByAdminCheck &&
             adminUpdateFieldsCheck;
    }

    // Match user profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if studentIsCreatingOwnProfile(userId);
      allow update: if studentIsUpdatingOwnAllowedFields(userId) || 
                       isAdminUpdatingStudentLinkStatus(userId); 
      allow delete: if requestingUserIsAdmin(); // Or owner if you want users to delete their own accounts
    }

    // Match admin profiles
    match /admins/{adminId} {
      allow read: if isAuthenticated(); 
      allow create: if requestingUserIsAdmin() && isOwner(adminId); 
      allow update: if requestingUserIsAdmin() && isOwner(adminId) &&
                       coreImmutableFieldsUnchanged(['userId', 'adminUniqueId', 'createdAt']) && // email can be part of mutable set if needed
                       incomingKeysAreSubsetOf(['userId', 'adminUniqueId', 'email', 'createdAt', 'updatedAt'].toSet()); // Specify all fields admin can have
      allow delete: if false; 
    }

    // Match student link requests
    match /studentLinkRequests/{requestId} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.studentUserId) || 
                      (requestingUserIsAdmin() && request.auth.uid == resource.data.adminFirebaseId));
      allow create: if isAuthenticated() && 
                       requestingUserIsStudent() && 
                       isOwner(request.resource.data.studentUserId) &&
                       request.resource.data.status == 'pending' &&
                       // Ensure only specific fields are set on creation
                       request.resource.data.keys().hasAll(['studentUserId', 'studentEmail', 'studentName', 'adminUniqueIdTargeted', 'adminFirebaseId', 'status', 'requestedAt']) &&
                       incomingKeysAreSubsetOf(['id', 'studentUserId', 'studentEmail', 'studentName', 'studentRollNo', 'adminUniqueIdTargeted', 'adminFirebaseId', 'status', 'requestedAt', 'resolvedAt', 'resolvedBy'].toSet());
                       
      allow update: if requestingUserIsAdmin() && 
                       request.auth.uid == resource.data.adminFirebaseId && 
                       request.resource.data.status != resource.data.status && 
                       (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected') &&
                       // Admin should only update status, resolvedAt, resolvedBy
                       coreImmutableFieldsUnchanged(['id', 'studentUserId', 'studentEmail', 'studentName', 'studentRollNo', 'adminUniqueIdTargeted', 'adminFirebaseId', 'requestedAt']) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'resolvedAt', 'resolvedBy']);
      allow delete: if false;
    }
  }
}

    